# -*- coding: utf-8 -*-
"""music.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18kIM1nQZUqFTozYOTSSof4MHieuiOppk
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.neighbors import NearestNeighbors

# Load the data
data = pd.read_csv('mrd.csv')

# Preprocess the data
# Encode categorical features
label_encoders = {}
for column in ['Gender', 'Preferred_genre', 'Genres']:
    le = LabelEncoder()
    data[column] = le.fit_transform(data[column])
    label_encoders[column] = le

# Define features and target
X = data[['Age', 'Gender', 'Preferred_genre', 'Genres']]
y = data['Song_name']  # Use Song_name, or Song_id if preferred

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create KNN model
knn = NearestNeighbors(n_neighbors=5)
knn.fit(X_train)

def recommend_music(age, gender, preferred_genre):
    # Encode the input
    input_data = pd.DataFrame({
        'Age': [age],
        'Gender': [label_encoders['Gender'].transform([gender])[0]],
        'Preferred_genre': [label_encoders['Preferred_genre'].transform([preferred_genre])[0]],
        'Genres': [0]  # Use a dummy value here for genre, will focus on neighbors
    })

    # Find the nearest neighbors
    distances, indices = knn.kneighbors(input_data)

    # Get recommended songs from the nearest neighbors
    recommended_songs = y_train.iloc[indices[0]].values

    return recommended_songs

if __name__ == "__main__":
    print("Welcome to the Music Recommendation System!")
    age = int(input("Enter your age: "))
    gender = input("Enter your gender (Male/Female/Other): ")
    preferred_genre = input("Enter your preferred genre (Rock, Pop, Hip-Hop, Jazz, Classical): ")

    # Provide recommendations
    recommendations = recommend_music(age, gender, preferred_genre)

    print("We recommend the following songs:")
    for song in recommendations:
        print(song)